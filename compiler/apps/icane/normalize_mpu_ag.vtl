module normalize_mpu_ag;


normAX, normAY, normAZ : circular float[400]; 
normGX, normGY, normGZ : circular float[400];

default flow normalizeAG(MPU6050 mpu, fifoBuffer: int[]) {
	VectorInt16 acc__, gyr__;
	mpu1.dmpGetAccel(&acc__, fifoBuffer);
	mpu1.dmpGetGyro(&gyr__, fifoBuffer);
	//VectorInt16 from jrowberg to generic Vector3D
	acc : int16[] = {acc__.x, acc__.y, acc__.z};
	gyr  = {gyr__.x, gyr__.y, gyr__.z};
	minMaxNormalize(acc, minAcc, maxAcc, normAcc);
	minMaxNormalize(gyr, minGyr, maxGyr, normGyr);
	normAX.push(normAcc.x);
	normAY.push(normAcc.y);
	normAZ.push(normAcc.z);
	normGX.push(normGyr.x);
	normGY.push(normGyr.y);
	normGZ.push(normGyr.z);
	numNewReadings += 1;
	samplesAfterReset += 1;
	if(samplesAfterReset < 250){
		if(numNewReadings == STRIDE) numNewReadings = 0;
	} else if(numNewReadings == STRIDE){
		samplesAfterReset = 401;
		next(normAX, normAY, normAZ, normGX, normGY, normGZ);
	}	
}



/**
 * Min-max normalization of a measurement. The min and max
 * values have to be provided.
 *
 * @param v The values to normalize. Expected 16bit ints.
 * @param vmax A float vector containing the maximum values of 
 * vector.
 * @param vmin The minimum values for vector 1.
 * @param dst The float destination where the values will be
 * stored.
 * @returns void
 */
void minMaxNormalize(
	const int16 v[3],
	const int16 vmin[3], 
	const int16 vmax[3],
	float  dst[3]
	){
	
	dst.x = ((float)(v.x) - (float)(vmin.x));
	dst.x /= ((float)vmax.x - (float)vmin.x);

	dst.y = ((float)(v.y) - (float)(vmin.y));
	dst.y /= ((float)vmax->y - (float)vmin.y);

	dst.z = ((float)(v.z) - (float)(vmin.z));
	dst.z /= ((float)vmax.z - (float)vmin.z);
}
