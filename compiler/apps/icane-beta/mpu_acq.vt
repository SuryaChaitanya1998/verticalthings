module mpu_acq;

use arduino;

const int N = 64;

MPU6050 mpu1;
int[N] fifoBuffer;
//0..N fifoPacketSize;
int samplesAfterReset;  // Unsigned Long
int numNewReadings; // uint16_t
int mpuIntStatus; // uint8_t
void init(const boolean i2c_arduino) {
	if(i2c_arduino) {
	   Wire.begin();
	   Wire.setClock(400000);
	}else{
	   FastWire::setup(400, true);
	}

	mpu1.init();

	mpu1.dmpInitialize(); //assert == 0, panic != 0

	mpu1.setDMPEnabled(true);

	fifoPacketSize = mpu1.dmpGetFIFOPacketSize();//type error
}

default flow acq() {
	mpuIntStatus = mpu1.getIntStatus();

	if ((mpuIntStatus & 0x10) || fifoCount == 1024){
		// Buffer time 
		// 350ms @66hz  (empirical) i.e. 13ms between samples
		// 195ms @100Hz (empirical) i.e. 8ms between samples
		// 73ms  @200Hz (empirical) i.e. 3ms between samples
		// debug_print(millis());
		// debug_print(": FIFO Overflow!");
		mpu1.resetFIFO();
		samplesAfterReset = 0;
		numNewReadings = 0;
		// @todo How to handle fifo counter after overflow? Copy values,
		// try to make sense out of it and then reset FIFO.
	} else if ((mpuIntStatus & 0x02)){
		while(fifoCount < fifoPacketSize) {
			 fifoCount = mpu1.getFIFOCount(); 
		}
		if(fifoCount >= fifoPacketSize) {
			mpu1.getFIFOBytes(fifoBuffer, fifoPacketSize); //1ms
		//	next(mpu1, fifoBuffer);
		}
	}
}