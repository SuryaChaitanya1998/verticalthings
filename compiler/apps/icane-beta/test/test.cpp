/********************************************************************************
This code is automatically generated by the VerticalThings compiler. DO NOT EDIT!
********************************************************************************/
/*Managed memory variables*/
#include<Arduino.h>
unsigned char __vtmem[256];
int (*mpu_acq_fifoBuffer_p)[64]= (int (*)[64]) &__vtmem[0];
#define mpu_acq_fifoBuffer (*mpu_acq_fifoBuffer_p)
/*End of managed memory variables*/
/*Module vars for mpu_acq*/
const int mpu_acq_N=64;
undefined mpu_acq_mpu1;
int mpu_acq_samplesAfterReset;
int mpu_acq_numNewReadings;
int mpu_acq_mpuIntStatus;
/*End of module vars for mpu_acq*/
/*Module vars for arduino*/
/*End of module vars for arduino*/
typedef enum { __mpu_acq_acq}  __icane_test;
 __icane_test __state = __mpu_acq_acq;
void _mpu_acq_init(boolean mpu_acq_init_i2c_arduino)
{
{
if(mpu_acq_init_i2c_arduino)
{
Wire.begin();
Wire.setClock(400000);
}
else
{
FastWire(400, );
}
mpu1.init();
mpu1.dmpInitialize();
mpu1.setDMPEnabled();
fifoPacketSize=mpu1.dmpGetFIFOPacketSize();
}
}
void _mpu_acq_acq()
{
{
mpu_acq_mpuIntStatus=getIntStatus();
if(((mpu_acq_mpuIntStatus&16)||(fifoCount==1024)))
{
resetFIFO();
mpu_acq_samplesAfterReset=0;
mpu_acq_numNewReadings=0;
}
else
if((mpu_acq_mpuIntStatus&2))
{
while((fifoCount<fifoPacketSize))
{
fifoCount=getFIFOCount();
}
if((fifoCount>=fifoPacketSize))
{
getFIFOBytes(mpu_acq_fifoBuffer, fifoPacketSize);
}
}
}
}
void loop()
{
switch(__state)
{
case __mpu_acq_acq:
__state = __mpu_acq_acq;
___mpu_acq_acq();
break;
default :
__state = __mpu_acq_acq;
}
}
void setup()
{
}