/********************************************************************************
This code is automatically generated by the VerticalThings compiler. DO NOT EDIT!
********************************************************************************/
#include <Arduino.h>
#include <wiring_private.h>
// #include <Wire.h>
#include "src/utils.h"
#include "src/featureextraction.h"
#include "src/predictionfilter.h"
#include "src/lib/I2Cdev.h"
#include "src/lib/MPU6050_6Axis_MotionApps20.h"
#include "src/vote.h"
/*Managed memory variables*/
unsigned char __vtmem[6];
uint8_t (*mpu_acq_test_fifoBuffer_p)[64]= (uint8_t (*)[64]) &__vtmem[0];
#define mpu_acq_test_fifoBuffer (*mpu_acq_test_fifoBuffer_p)
int16_t (*mpu_acq_test_mpu_acq_acc_p)[3]= (int16_t (*)[3]) &__vtmem[0];
#define mpu_acq_test_mpu_acq_acc (*mpu_acq_test_mpu_acq_acc_p)
int16_t (*mpu_acq_test_mpu_acq_gyr_p)[3]= (int16_t (*)[3]) &__vtmem[0];
#define mpu_acq_test_mpu_acq_gyr (*mpu_acq_test_mpu_acq_gyr_p)
/*End of managed memory variables*/
/*Module vars for mpu_acq_test*/
const int mpu_acq_test_x=0, mpu_acq_test_y=1, mpu_acq_test_z=2;
MPU6050 mpu_acq_test_mpu1;
uint16_t mpu_acq_test_fifoPacketSize;
uint16_t mpu_acq_test_currBucketBufferSize=0;
uint16_t mpu_acq_test_numNewReadings=0;
uint32_t mpu_acq_test_lastSent=0;
uint32_t mpu_acq_test_samplesAfterReset=0;
/*End of module vars for mpu_acq_test*/
/*Module vars for arduino*/
/*End of module vars for arduino*/
typedef enum { __mpu_acq_test_mpu_acq}  __icane_test;
 __icane_test __state = __mpu_acq_test_mpu_acq;
void _mpu_acq_test_init()
{
    uint8_t mpu_acq_test_init_devStatus;
    {
        Wire.begin();
        Wire.setClock(400000);
        mpu_acq_test_mpu1.initialize();
        mpu_acq_test_init_devStatus=mpu_acq_test_mpu1.dmpInitialize();
        if((mpu_acq_test_init_devStatus==0))
        {
            mpu_acq_test_mpu1.setDMPEnabled(true);
            }
        else
        {
            }
        mpu_acq_test_fifoPacketSize=mpu_acq_test_mpu1.dmpGetFIFOPacketSize();
        }
    }
void _mpu_acq_test_mpu_acq()
{
    uint16_t mpu_acq_test_mpu_acq_fifoCount=mpu_acq_test_mpu1.getFIFOCount();
    uint8_t mpu_acq_test_mpu_acq_mpuIntStatus=mpu_acq_test_mpu1.getIntStatus();
    VectorInt16 mpu_acq_test_mpu_acq_acc__, mpu_acq_test_mpu_acq_gyr__;
    {
        if(((mpu_acq_test_mpu_acq_mpuIntStatus&16)||(mpu_acq_test_mpu_acq_fifoCount==1024)))
        {
            mpu_acq_test_mpu1.resetFIFO();
            mpu_acq_test_samplesAfterReset=0;
            mpu_acq_test_numNewReadings=0;
            }
        else
        if((mpu_acq_test_mpu_acq_mpuIntStatus&2))
        {
            if((mpu_acq_test_mpu_acq_fifoCount>=mpu_acq_test_fifoPacketSize))
            {
                mpu_acq_test_mpu1.getFIFOBytes(mpu_acq_test_fifoBuffer, mpu_acq_test_fifoPacketSize);
                mpu_acq_test_mpu1.dmpGetAccel(&(mpu_acq_test_mpu_acq_acc__), mpu_acq_test_fifoBuffer);
                mpu_acq_test_mpu1.dmpGetGyro(&(mpu_acq_test_mpu_acq_gyr__), mpu_acq_test_fifoBuffer);
                mpu_acq_test_mpu_acq_acc[mpu_acq_test_x]=mpu_acq_test_mpu_acq_acc__.x;
                mpu_acq_test_mpu_acq_acc[mpu_acq_test_y]=mpu_acq_test_mpu_acq_acc__.y;
                mpu_acq_test_mpu_acq_acc[mpu_acq_test_z]=mpu_acq_test_mpu_acq_acc__.z;
                mpu_acq_test_mpu_acq_gyr[mpu_acq_test_x]=mpu_acq_test_mpu_acq_gyr__.x;
                mpu_acq_test_mpu_acq_gyr[mpu_acq_test_y]=mpu_acq_test_mpu_acq_gyr__.y;
                mpu_acq_test_mpu_acq_gyr[mpu_acq_test_z]=mpu_acq_test_mpu_acq_gyr__.z;
                mpu_acq_test_numNewReadings=(mpu_acq_test_numNewReadings+1);
                mpu_acq_test_samplesAfterReset=(mpu_acq_test_samplesAfterReset+1);
                }
            }
        }
    }
void loop()
{
    switch(__state)
    {
        case __mpu_acq_test_mpu_acq:
        __state = __mpu_acq_test_mpu_acq;
        _mpu_acq_test_mpu_acq();
        break;
        default :
        __state = __mpu_acq_test_mpu_acq;
        }
    }
void setup()
{
    _mpu_acq_test_init();
    }