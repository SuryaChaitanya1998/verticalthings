/********************************************************************************
This code is automatically generated by the VerticalThings compiler. DO NOT EDIT!
********************************************************************************/
#include <Arduino.h>
#include <wiring_private.h>
#include "src/utils.h"
#include "src/featureextraction.h"
#include "src/predictionfilter.h"
#include "src/lib/I2Cdev.h"
#include "src/lib/MPU6050_6Axis_MotionApps20.h"
#include "src/vote.h"
/*Managed memory variables*/
unsigned char __vtmem[10134];
int16_t (*normalize_inp_test_minAcc_p)[3]= (int16_t (*)[3]) &__vtmem[0];
#define normalize_inp_test_minAcc (*normalize_inp_test_minAcc_p)
int16_t (*normalize_inp_test_maxAcc_p)[3]= (int16_t (*)[3]) &__vtmem[6];
#define normalize_inp_test_maxAcc (*normalize_inp_test_maxAcc_p)
int16_t (*normalize_inp_test_minGyr_p)[3]= (int16_t (*)[3]) &__vtmem[12];
#define normalize_inp_test_minGyr (*normalize_inp_test_minGyr_p)
int16_t (*normalize_inp_test_maxGyr_p)[3]= (int16_t (*)[3]) &__vtmem[18];
#define normalize_inp_test_maxGyr (*normalize_inp_test_maxGyr_p)
float (*normalize_inp_test_normAX_p)[400]= (float (*)[400]) &__vtmem[24];
#define normalize_inp_test_normAX (*normalize_inp_test_normAX_p)
float (*normalize_inp_test_normAY_p)[400]= (float (*)[400]) &__vtmem[1624];
#define normalize_inp_test_normAY (*normalize_inp_test_normAY_p)
float (*normalize_inp_test_normAZ_p)[400]= (float (*)[400]) &__vtmem[3224];
#define normalize_inp_test_normAZ (*normalize_inp_test_normAZ_p)
float (*normalize_inp_test_normGX_p)[400]= (float (*)[400]) &__vtmem[4824];
#define normalize_inp_test_normGX (*normalize_inp_test_normGX_p)
float (*normalize_inp_test_normGY_p)[400]= (float (*)[400]) &__vtmem[6424];
#define normalize_inp_test_normGY (*normalize_inp_test_normGY_p)
float (*normalize_inp_test_normGZ_p)[400]= (float (*)[400]) &__vtmem[8024];
#define normalize_inp_test_normGZ (*normalize_inp_test_normGZ_p)
int (*tlcfeaturizer_test_featureVector_p)[124]= (int (*)[124]) &__vtmem[9624];
#define tlcfeaturizer_test_featureVector (*tlcfeaturizer_test_featureVector_p)
uint8_t (*mpu_acq_test_fifoBuffer_p)[64]= (uint8_t (*)[64]) &__vtmem[10120];
#define mpu_acq_test_fifoBuffer (*mpu_acq_test_fifoBuffer_p)
int16_t (*mpu_acq_test_mpu_acq_acc_p)[3]= (int16_t (*)[3]) &__vtmem[10120];
#define mpu_acq_test_mpu_acq_acc (*mpu_acq_test_mpu_acq_acc_p)
int16_t (*mpu_acq_test_mpu_acq_gyr_p)[3]= (int16_t (*)[3]) &__vtmem[10120];
#define mpu_acq_test_mpu_acq_gyr (*mpu_acq_test_mpu_acq_gyr_p)
float (*normalize_inp_test_normalize_normAcc_p)[3]= (float (*)[3]) &__vtmem[10126];
#define normalize_inp_test_normalize_normAcc (*normalize_inp_test_normalize_normAcc_p)
float (*normalize_inp_test_normalize_normGyr_p)[3]= (float (*)[3]) &__vtmem[10128];
#define normalize_inp_test_normalize_normGyr (*normalize_inp_test_normalize_normGyr_p)
float (*tlcfeaturizer_test_featureVectorF_p)[124]= (float (*)[124]) &__vtmem[10130];
#define tlcfeaturizer_test_featureVectorF (*tlcfeaturizer_test_featureVectorF_p)
/*End of managed memory variables*/
/*Module vars for mpu_acq_test*/
const int mpu_acq_test_x=0, mpu_acq_test_y=1, mpu_acq_test_z=2;
MPU6050 mpu_acq_test_mpu1;
uint16_t mpu_acq_test_fifoPacketSize;
uint16_t mpu_acq_test_currBucketBufferSize=0;
uint16_t mpu_acq_test_numNewReadings=0;
uint32_t mpu_acq_test_lastSent=0;
uint32_t mpu_acq_test_samplesAfterReset=0;
/*End of module vars for mpu_acq_test*/
/*Module vars for arduino*/
/*End of module vars for arduino*/
/*Module vars for normalize_inp_test*/
const int16_t normalize_inp_test_BAUD_RATE=115200;
const int16_t normalize_inp_test_NUM_BUCKETS=20;
const int16_t normalize_inp_test_STRIDE=20;
const int16_t normalize_inp_test_BUCKET_WIDTH=20;
const int16_t normalize_inp_test_BUCKET_BUFF_WIDTH=40;
const int16_t normalize_inp_test_FEATURE_LENGTH=124;
const int16_t normalize_inp_test_FEAT_VEC_DIM=124;
const int16_t normalize_inp_test_GEST_NOTA=0;
const int16_t normalize_inp_test_GEST_SILENCE=1;
const int16_t normalize_inp_test_GEST_TAP=2;
const int16_t normalize_inp_test_GEST_DTAP=3;
const int16_t normalize_inp_test_GEST_LTWIST=4;
const int16_t normalize_inp_test_GEST_RTWIST=5;
const int16_t normalize_inp_test_GEST_Slow_LTWIST=7;
const int16_t normalize_inp_test_GEST_Slow_RTWIST=8;
int normalize_inp_test___pos_normAX = 0;
int normalize_inp_test___pos_normAY = 0;
int normalize_inp_test___pos_normAZ = 0;
int normalize_inp_test___pos_normGX = 0;
int normalize_inp_test___pos_normGY = 0;
int normalize_inp_test___pos_normGZ = 0;
const int normalize_inp_test_x=0, normalize_inp_test_y=1, normalize_inp_test_z=2;
/*End of module vars for normalize_inp_test*/
int16_t (*normalize_inp_test_normalize_acc_p)[3];
#define normalize_inp_test_normalize_acc (*normalize_inp_test_normalize_acc_p)
int16_t (*normalize_inp_test_normalize_gyr_p)[3];
#define normalize_inp_test_normalize_gyr (*normalize_inp_test_normalize_gyr_p)
int16_t (*normalize_inp_test_normalize_numNewReadings_p);
#define normalize_inp_test_normalize_numNewReadings (*normalize_inp_test_normalize_numNewReadings_p)
int32_t (*normalize_inp_test_normalize_samplesAfterReset_p);
#define normalize_inp_test_normalize_samplesAfterReset (*normalize_inp_test_normalize_samplesAfterReset_p)
/*Module vars for tlcfeaturizer_test*/
const int16_t tlcfeaturizer_test_BAUD_RATE=115200;
const int16_t tlcfeaturizer_test_NUM_BUCKETS=20;
const int16_t tlcfeaturizer_test_STRIDE=20;
const int16_t tlcfeaturizer_test_BUCKET_WIDTH=20;
const int16_t tlcfeaturizer_test_BUCKET_BUFF_WIDTH=40;
const int16_t tlcfeaturizer_test_FEATURE_LENGTH=124;
const int16_t tlcfeaturizer_test_FEAT_VEC_DIM=124;
const int16_t tlcfeaturizer_test_GEST_NOTA=0;
const int16_t tlcfeaturizer_test_GEST_SILENCE=1;
const int16_t tlcfeaturizer_test_GEST_TAP=2;
const int16_t tlcfeaturizer_test_GEST_DTAP=3;
const int16_t tlcfeaturizer_test_GEST_LTWIST=4;
const int16_t tlcfeaturizer_test_GEST_RTWIST=5;
const int16_t tlcfeaturizer_test_GEST_Slow_LTWIST=7;
const int16_t tlcfeaturizer_test_GEST_Slow_RTWIST=8;
int tlcfeaturizer_test_bucketIndex;
/*End of module vars for tlcfeaturizer_test*/
float (*tlcfeaturizer_test_featurizer_normAX_p)[400];
#define tlcfeaturizer_test_featurizer_normAX (*tlcfeaturizer_test_featurizer_normAX_p)
int tlcfeaturizer_test_featurizer___pos_normAX;
float (*tlcfeaturizer_test_featurizer_normAY_p)[400];
#define tlcfeaturizer_test_featurizer_normAY (*tlcfeaturizer_test_featurizer_normAY_p)
int tlcfeaturizer_test_featurizer___pos_normAY;
float (*tlcfeaturizer_test_featurizer_normAZ_p)[400];
#define tlcfeaturizer_test_featurizer_normAZ (*tlcfeaturizer_test_featurizer_normAZ_p)
int tlcfeaturizer_test_featurizer___pos_normAZ;
float (*tlcfeaturizer_test_featurizer_normGX_p)[400];
#define tlcfeaturizer_test_featurizer_normGX (*tlcfeaturizer_test_featurizer_normGX_p)
int tlcfeaturizer_test_featurizer___pos_normGX;
float (*tlcfeaturizer_test_featurizer_normGY_p)[400];
#define tlcfeaturizer_test_featurizer_normGY (*tlcfeaturizer_test_featurizer_normGY_p)
int tlcfeaturizer_test_featurizer___pos_normGY;
float (*tlcfeaturizer_test_featurizer_normGZ_p)[400];
#define tlcfeaturizer_test_featurizer_normGZ (*tlcfeaturizer_test_featurizer_normGZ_p)
int tlcfeaturizer_test_featurizer___pos_normGZ;
typedef enum { __mpu_acq_test_mpu_acq, __normalize_inp_test_normalize, __tlcfeaturizer_test_featurizer}  __icane_test;
 __icane_test __state = __mpu_acq_test_mpu_acq;
void _mpu_acq_test_init()
{
    uint8_t mpu_acq_test_init_devStatus;
    {
        Wire.begin();
        Wire.setClock(400000);
        mpu_acq_test_mpu1.initialize();
        mpu_acq_test_init_devStatus=mpu_acq_test_mpu1.dmpInitialize();
        if((mpu_acq_test_init_devStatus==0))
        {
            mpu_acq_test_mpu1.setDMPEnabled(true);
        }
        else
        {
        }
        mpu_acq_test_fifoPacketSize=mpu_acq_test_mpu1.dmpGetFIFOPacketSize();
    }
}
void _mpu_acq_test_mpu_acq()
{
    uint16_t mpu_acq_test_mpu_acq_fifoCount=mpu_acq_test_mpu1.getFIFOCount();
    uint8_t mpu_acq_test_mpu_acq_mpuIntStatus=mpu_acq_test_mpu1.getIntStatus();
    VectorInt16 mpu_acq_test_mpu_acq_acc__, mpu_acq_test_mpu_acq_gyr__;
    {
        if(((mpu_acq_test_mpu_acq_mpuIntStatus&16)||(mpu_acq_test_mpu_acq_fifoCount==1024)))
        {
            mpu_acq_test_mpu1.resetFIFO();
            mpu_acq_test_samplesAfterReset=0;
            mpu_acq_test_numNewReadings=0;
        }
        else
        if((mpu_acq_test_mpu_acq_mpuIntStatus&2))
        {
            if((mpu_acq_test_mpu_acq_fifoCount>=mpu_acq_test_fifoPacketSize))
            {
                mpu_acq_test_mpu1.getFIFOBytes(mpu_acq_test_fifoBuffer, mpu_acq_test_fifoPacketSize);
                mpu_acq_test_mpu1.dmpGetAccel(&(mpu_acq_test_mpu_acq_acc__), mpu_acq_test_fifoBuffer);
                mpu_acq_test_mpu1.dmpGetGyro(&(mpu_acq_test_mpu_acq_gyr__), mpu_acq_test_fifoBuffer);
                mpu_acq_test_mpu_acq_acc[mpu_acq_test_x]=mpu_acq_test_mpu_acq_acc__.x;
                mpu_acq_test_mpu_acq_acc[mpu_acq_test_y]=mpu_acq_test_mpu_acq_acc__.y;
                mpu_acq_test_mpu_acq_acc[mpu_acq_test_z]=mpu_acq_test_mpu_acq_acc__.z;
                mpu_acq_test_mpu_acq_gyr[mpu_acq_test_x]=mpu_acq_test_mpu_acq_gyr__.x;
                mpu_acq_test_mpu_acq_gyr[mpu_acq_test_y]=mpu_acq_test_mpu_acq_gyr__.y;
                mpu_acq_test_mpu_acq_gyr[mpu_acq_test_z]=mpu_acq_test_mpu_acq_gyr__.z;
                normalize_inp_test_normalize_acc_p = &(mpu_acq_test_mpu_acq_acc); normalize_inp_test_normalize_gyr_p = &(mpu_acq_test_mpu_acq_gyr); normalize_inp_test_normalize_numNewReadings = mpu_acq_test_numNewReadings; normalize_inp_test_normalize_samplesAfterReset = mpu_acq_test_samplesAfterReset; __state = __normalize_inp_test_normalize;
            }
        }
    }
}
void _normalize_inp_test_init()
{
    {
        normalize_inp_test_minAcc[normalize_inp_test_x]=(-16384);
        normalize_inp_test_minAcc[normalize_inp_test_y]=(-16384);
        normalize_inp_test_minAcc[normalize_inp_test_z]=(-16384);
        normalize_inp_test_maxAcc[normalize_inp_test_x]=16384;
        normalize_inp_test_maxAcc[normalize_inp_test_y]=16384;
        normalize_inp_test_maxAcc[normalize_inp_test_z]=16384;
        normalize_inp_test_minGyr[normalize_inp_test_x]=(-512);
        normalize_inp_test_minGyr[normalize_inp_test_y]=(-2048);
        normalize_inp_test_minGyr[normalize_inp_test_z]=(-512);
        normalize_inp_test_maxGyr[normalize_inp_test_x]=512;
        normalize_inp_test_maxGyr[normalize_inp_test_y]=2048;
        normalize_inp_test_maxGyr[normalize_inp_test_z]=512;
    }
}
void _normalize_inp_test_minMaxNormalize(int16_t normalize_inp_test_minMaxNormalize_v[3], int16_t normalize_inp_test_minMaxNormalize_vmin[3], int16_t normalize_inp_test_minMaxNormalize_vmax[3], float normalize_inp_test_minMaxNormalize_dst[3])
{
    {
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_x]=(( (float) (normalize_inp_test_minMaxNormalize_v[normalize_inp_test_x]))-( (float) (normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_x])));
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_x]=(normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_x]/(( (float) (normalize_inp_test_minMaxNormalize_vmax[normalize_inp_test_x]))-( (float) (normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_x]))));
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_y]=(( (float) (normalize_inp_test_minMaxNormalize_v[normalize_inp_test_y]))-( (float) (normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_y])));
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_y]=(normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_y]/(( (float) (normalize_inp_test_minMaxNormalize_vmax[normalize_inp_test_y]))-( (float) (normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_y]))));
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_z]=(( (float) (normalize_inp_test_minMaxNormalize_v[normalize_inp_test_z]))-( (float) (normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_z])));
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_z]=(normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_z]/(( (float) (normalize_inp_test_minMaxNormalize_vmax[normalize_inp_test_z]))-( (float) (normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_z]))));
    }
}
void _normalize_inp_test_normalize()
{
    {
        _normalize_inp_test_minMaxNormalize(normalize_inp_test_normalize_acc, normalize_inp_test_minAcc, normalize_inp_test_maxAcc, normalize_inp_test_normalize_normAcc);
        _normalize_inp_test_minMaxNormalize(normalize_inp_test_normalize_gyr, normalize_inp_test_minGyr, normalize_inp_test_maxGyr, normalize_inp_test_normalize_normGyr);
        (normalize_inp_test_normAX[normalize_inp_test___pos_normAX = (normalize_inp_test___pos_normAX + 1 == 400 ? 0: normalize_inp_test___pos_normAX + 1)] = normalize_inp_test_normalize_normAcc[normalize_inp_test_x]);
        (normalize_inp_test_normAY[normalize_inp_test___pos_normAY = (normalize_inp_test___pos_normAY + 1 == 400 ? 0: normalize_inp_test___pos_normAY + 1)] = normalize_inp_test_normalize_normAcc[normalize_inp_test_y]);
        (normalize_inp_test_normAZ[normalize_inp_test___pos_normAZ = (normalize_inp_test___pos_normAZ + 1 == 400 ? 0: normalize_inp_test___pos_normAZ + 1)] = normalize_inp_test_normalize_normAcc[normalize_inp_test_z]);
        (normalize_inp_test_normGX[normalize_inp_test___pos_normGX = (normalize_inp_test___pos_normGX + 1 == 400 ? 0: normalize_inp_test___pos_normGX + 1)] = normalize_inp_test_normalize_normGyr[normalize_inp_test_x]);
        (normalize_inp_test_normGY[normalize_inp_test___pos_normGY = (normalize_inp_test___pos_normGY + 1 == 400 ? 0: normalize_inp_test___pos_normGY + 1)] = normalize_inp_test_normalize_normGyr[normalize_inp_test_y]);
        (normalize_inp_test_normGZ[normalize_inp_test___pos_normGZ = (normalize_inp_test___pos_normGZ + 1 == 400 ? 0: normalize_inp_test___pos_normGZ + 1)] = normalize_inp_test_normalize_normGyr[normalize_inp_test_z]);
        normalize_inp_test_normalize_numNewReadings=(normalize_inp_test_normalize_numNewReadings+1);
        normalize_inp_test_normalize_samplesAfterReset=(normalize_inp_test_normalize_samplesAfterReset+1);
        if((normalize_inp_test_normalize_samplesAfterReset<250))
        {
            if((normalize_inp_test_normalize_numNewReadings==normalize_inp_test_STRIDE))
            {
                normalize_inp_test_normalize_numNewReadings=0;
            }
        }
        else
        if((normalize_inp_test_normalize_numNewReadings==normalize_inp_test_STRIDE))
        {
            normalize_inp_test_normalize_samplesAfterReset=401;
            tlcfeaturizer_test_featurizer_normAX_p = &(normalize_inp_test_normAX); tlcfeaturizer_test_featurizer___pos_normAX = normalize_inp_test___pos_normAX;tlcfeaturizer_test_featurizer_normAY_p = &(normalize_inp_test_normAY); tlcfeaturizer_test_featurizer___pos_normAY = normalize_inp_test___pos_normAY;tlcfeaturizer_test_featurizer_normAZ_p = &(normalize_inp_test_normAZ); tlcfeaturizer_test_featurizer___pos_normAZ = normalize_inp_test___pos_normAZ;tlcfeaturizer_test_featurizer_normGX_p = &(normalize_inp_test_normGX); tlcfeaturizer_test_featurizer___pos_normGX = normalize_inp_test___pos_normGX;tlcfeaturizer_test_featurizer_normGY_p = &(normalize_inp_test_normGY); tlcfeaturizer_test_featurizer___pos_normGY = normalize_inp_test___pos_normGY;tlcfeaturizer_test_featurizer_normGZ_p = &(normalize_inp_test_normGZ); tlcfeaturizer_test_featurizer___pos_normGZ = normalize_inp_test___pos_normGZ;__state = __tlcfeaturizer_test_featurizer;
        }
    }
}
void _tlcfeaturizer_test_init()
{
    {
        for(int __i=0; __i<124; __i++)
        {
            tlcfeaturizer_test_featureVector[__i]=0;
            tlcfeaturizer_test_featureVectorF[__i]=0;
        }
        tlcfeaturizer_test_featureVector[0]=(-1);
        tlcfeaturizer_test_featureVector[3]=(-1);
        tlcfeaturizer_test_bucketIndex=4;
    }
}
void _tlcfeaturizer_test_getBucket(float tlcfeaturizer_test_getBucket_sensorValue1D[400], int tlcfeaturizer_test_getBucket___pos_sensorValue1D, boolean tlcfeaturizer_test_getBucket_isGY)
{
    int tlcfeaturizer_test_getBucket_imax=0, tlcfeaturizer_test_getBucket_imin=0, tlcfeaturizer_test_getBucket_maxval=0, tlcfeaturizer_test_getBucket_minval=0, tlcfeaturizer_test_getBucket_maxcount=0, tlcfeaturizer_test_getBucket_mincount=0, tlcfeaturizer_test_getBucket_postemp=0, tlcfeaturizer_test_getBucket_negtemp=0, tlcfeaturizer_test_getBucket_bucketCount, tlcfeaturizer_test_getBucket_val, tlcfeaturizer_test_getBucket_index, tlcfeaturizer_test_getBucket_thresholdCount;
    boolean tlcfeaturizer_test_getBucket_flagPos=true, tlcfeaturizer_test_getBucket_flagNeg=true;
    float tlcfeaturizer_test_getBucket_j, tlcfeaturizer_test_getBucket_k;
    {
        for(int i=0; i<400; i++)
        {
            tlcfeaturizer_test_getBucket_val=(( (int) (100))*tlcfeaturizer_test_getBucket_sensorValue1D[ ( (i) + tlcfeaturizer_test_getBucket___pos_sensorValue1D) % 400]);
            if((tlcfeaturizer_test_getBucket_val<0))
            {
                tlcfeaturizer_test_featureVector[tlcfeaturizer_test_bucketIndex]=(tlcfeaturizer_test_featureVector[tlcfeaturizer_test_bucketIndex]+1);
            }
            else
            if((tlcfeaturizer_test_getBucket_val>100))
            {
                tlcfeaturizer_test_featureVector[(tlcfeaturizer_test_bucketIndex+19)]=(tlcfeaturizer_test_featureVector[(tlcfeaturizer_test_bucketIndex+19)]+1);
            }
            else
            {
                tlcfeaturizer_test_getBucket_index=(tlcfeaturizer_test_getBucket_val/5);
                tlcfeaturizer_test_featureVector[(tlcfeaturizer_test_bucketIndex+tlcfeaturizer_test_getBucket_index)]=(tlcfeaturizer_test_featureVector[(tlcfeaturizer_test_bucketIndex+tlcfeaturizer_test_getBucket_index)]+1);
            }
            if((tlcfeaturizer_test_getBucket_isGY==1))
            {
                tlcfeaturizer_test_getBucket_thresholdCount=3;
                if(((tlcfeaturizer_test_getBucket_val>62)&&(tlcfeaturizer_test_getBucket_flagPos==0)))
                {
                    tlcfeaturizer_test_getBucket_maxcount=1;
                    tlcfeaturizer_test_getBucket_postemp=i;
                    tlcfeaturizer_test_getBucket_flagPos=true;
                    tlcfeaturizer_test_getBucket_flagNeg=true;
                }
                else
                if(((tlcfeaturizer_test_getBucket_val>62)&&(tlcfeaturizer_test_getBucket_flagPos==1)))
                {
                    tlcfeaturizer_test_getBucket_flagNeg=0;
                    tlcfeaturizer_test_getBucket_mincount=0;
                    tlcfeaturizer_test_getBucket_maxcount=(tlcfeaturizer_test_getBucket_maxcount+1);
                    if((tlcfeaturizer_test_getBucket_maxcount>tlcfeaturizer_test_getBucket_maxval))
                    {
                        tlcfeaturizer_test_getBucket_maxval=tlcfeaturizer_test_getBucket_maxcount;
                        if((tlcfeaturizer_test_getBucket_maxval>tlcfeaturizer_test_getBucket_thresholdCount))
                        {
                            tlcfeaturizer_test_featureVector[1]=tlcfeaturizer_test_getBucket_maxval;
                        }
                        tlcfeaturizer_test_getBucket_imax=tlcfeaturizer_test_getBucket_postemp;
                        if((tlcfeaturizer_test_getBucket_maxval>tlcfeaturizer_test_getBucket_thresholdCount))
                        {
                            tlcfeaturizer_test_featureVector[0]=tlcfeaturizer_test_getBucket_imax;
                        }
                    }
                }
                else
                if((((tlcfeaturizer_test_getBucket_val<62)&&(tlcfeaturizer_test_getBucket_flagPos==1))&&(tlcfeaturizer_test_getBucket_val>32)))
                {
                    tlcfeaturizer_test_getBucket_flagPos=true;
                    tlcfeaturizer_test_getBucket_maxcount=0;
                    tlcfeaturizer_test_getBucket_mincount=0;
                }
                else
                if((((tlcfeaturizer_test_getBucket_val<62)&&(tlcfeaturizer_test_getBucket_flagPos==1))&&(tlcfeaturizer_test_getBucket_val<32)))
                {
                    tlcfeaturizer_test_getBucket_flagPos=true;
                    tlcfeaturizer_test_getBucket_maxcount=0;
                    tlcfeaturizer_test_getBucket_mincount=0;
                    tlcfeaturizer_test_getBucket_negtemp=i;
                    tlcfeaturizer_test_getBucket_flagNeg=true;
                }
                else
                if(((tlcfeaturizer_test_getBucket_val<32)&&(tlcfeaturizer_test_getBucket_flagNeg==0)))
                {
                    tlcfeaturizer_test_getBucket_mincount=1;
                    tlcfeaturizer_test_getBucket_negtemp=i;
                    tlcfeaturizer_test_getBucket_flagNeg=true;
                    tlcfeaturizer_test_getBucket_flagPos=true;
                }
                else
                if(((tlcfeaturizer_test_getBucket_val<32)&&(tlcfeaturizer_test_getBucket_flagNeg==1)))
                {
                    tlcfeaturizer_test_getBucket_mincount=(tlcfeaturizer_test_getBucket_mincount+1);
                    if((tlcfeaturizer_test_getBucket_mincount>tlcfeaturizer_test_getBucket_minval))
                    {
                        tlcfeaturizer_test_getBucket_minval=tlcfeaturizer_test_getBucket_mincount;
                        if((tlcfeaturizer_test_getBucket_minval>tlcfeaturizer_test_getBucket_thresholdCount))
                        {
                            tlcfeaturizer_test_featureVector[2]=tlcfeaturizer_test_getBucket_minval;
                        }
                        tlcfeaturizer_test_getBucket_imin=tlcfeaturizer_test_getBucket_negtemp;
                        if((tlcfeaturizer_test_getBucket_minval>tlcfeaturizer_test_getBucket_thresholdCount))
                        {
                            tlcfeaturizer_test_featureVector[3]=tlcfeaturizer_test_getBucket_imin;
                        }
                    }
                }
                else
                if((((tlcfeaturizer_test_getBucket_val>32)&&(tlcfeaturizer_test_getBucket_flagNeg==1))&&(tlcfeaturizer_test_getBucket_val<65)))
                {
                    tlcfeaturizer_test_getBucket_flagNeg=true;
                    tlcfeaturizer_test_getBucket_mincount=0;
                }
                else
                if((((tlcfeaturizer_test_getBucket_val>32)&&(tlcfeaturizer_test_getBucket_flagNeg==1))&&(tlcfeaturizer_test_getBucket_val>65)))
                {
                    tlcfeaturizer_test_getBucket_flagNeg=true;
                    tlcfeaturizer_test_getBucket_mincount=0;
                    tlcfeaturizer_test_getBucket_maxcount=1;
                    tlcfeaturizer_test_getBucket_postemp=i;
                    tlcfeaturizer_test_getBucket_flagPos=true;
                }
                else
                {
                    tlcfeaturizer_test_getBucket_flagPos=true;
                    tlcfeaturizer_test_getBucket_maxcount=0;
                    tlcfeaturizer_test_getBucket_flagNeg=true;
                    tlcfeaturizer_test_getBucket_mincount=0;
                }
            }
        }
        tlcfeaturizer_test_bucketIndex=(tlcfeaturizer_test_bucketIndex+tlcfeaturizer_test_BUCKET_WIDTH);
    }
}
void _tlcfeaturizer_test_featurizer()
{
    {
        _tlcfeaturizer_test_getBucket(tlcfeaturizer_test_featurizer_normAX, tlcfeaturizer_test_featurizer___pos_normAX, true);
        _tlcfeaturizer_test_getBucket(tlcfeaturizer_test_featurizer_normAY, tlcfeaturizer_test_featurizer___pos_normAY, true);
        _tlcfeaturizer_test_getBucket(tlcfeaturizer_test_featurizer_normAZ, tlcfeaturizer_test_featurizer___pos_normAZ, true);
        _tlcfeaturizer_test_getBucket(tlcfeaturizer_test_featurizer_normGX, tlcfeaturizer_test_featurizer___pos_normGX, true);
        _tlcfeaturizer_test_getBucket(tlcfeaturizer_test_featurizer_normGY, tlcfeaturizer_test_featurizer___pos_normGY, true);
        _tlcfeaturizer_test_getBucket(tlcfeaturizer_test_featurizer_normGZ, tlcfeaturizer_test_featurizer___pos_normGZ, true);
        for(int __i=0; __i<124; __i++)
        {
            tlcfeaturizer_test_featureVectorF[__i]=tlcfeaturizer_test_featureVector[__i];
        }
    }
}
void loop()
{
    switch(__state)
    {
        case __mpu_acq_test_mpu_acq:
        __state = __mpu_acq_test_mpu_acq;
        _mpu_acq_test_mpu_acq();
        break;
        case __normalize_inp_test_normalize:
        __state = __mpu_acq_test_mpu_acq;
        _normalize_inp_test_normalize();
        break;
        case __tlcfeaturizer_test_featurizer:
        __state = __mpu_acq_test_mpu_acq;
        _tlcfeaturizer_test_featurizer();
        break;
        default :
        __state = __mpu_acq_test_mpu_acq;
    }
}
void setup()
{
    _mpu_acq_test_init();
    _normalize_inp_test_init();
    _tlcfeaturizer_test_init();
}