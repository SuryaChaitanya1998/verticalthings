/********************************************************************************
This code is automatically generated by the VerticalThings compiler. DO NOT EDIT!
********************************************************************************/
#include <Arduino.h>
#include <wiring_private.h>
#include "src/utils.h"
#include "src/featureextraction.h"
#include "src/predictionfilter.h"
#include "src/lib/I2Cdev.h"
#include "src/lib/MPU6050_6Axis_MotionApps20.h"
#include "src/vote.h"
/*Managed memory variables*/
unsigned char __vtmem[8042];
int16_t (*normalize_inp_test_minAcc_p)[3]= (int16_t (*)[3]) &__vtmem[0];
#define normalize_inp_test_minAcc (*normalize_inp_test_minAcc_p)
int16_t (*normalize_inp_test_maxAcc_p)[3]= (int16_t (*)[3]) &__vtmem[6];
#define normalize_inp_test_maxAcc (*normalize_inp_test_maxAcc_p)
int16_t (*normalize_inp_test_minGyr_p)[3]= (int16_t (*)[3]) &__vtmem[12];
#define normalize_inp_test_minGyr (*normalize_inp_test_minGyr_p)
int16_t (*normalize_inp_test_maxGyr_p)[3]= (int16_t (*)[3]) &__vtmem[18];
#define normalize_inp_test_maxGyr (*normalize_inp_test_maxGyr_p)
float (*normalize_inp_test_normAX_p)[400]= (float (*)[400]) &__vtmem[24];
#define normalize_inp_test_normAX (*normalize_inp_test_normAX_p)
float (*normalize_inp_test_normAY_p)[400]= (float (*)[400]) &__vtmem[1624];
#define normalize_inp_test_normAY (*normalize_inp_test_normAY_p)
float (*normalize_inp_test_normAZ_p)[400]= (float (*)[400]) &__vtmem[3224];
#define normalize_inp_test_normAZ (*normalize_inp_test_normAZ_p)
float (*normalize_inp_test_normGX_p)[400]= (float (*)[400]) &__vtmem[4824];
#define normalize_inp_test_normGX (*normalize_inp_test_normGX_p)
float (*normalize_inp_test_normGZ_p)[400]= (float (*)[400]) &__vtmem[6424];
#define normalize_inp_test_normGZ (*normalize_inp_test_normGZ_p)
uint8_t (*mpu_acq_test_fifoBuffer_p)[64]= (uint8_t (*)[64]) &__vtmem[8024];
#define mpu_acq_test_fifoBuffer (*mpu_acq_test_fifoBuffer_p)
int16_t (*mpu_acq_test_mpu_acq_acc_p)[3]= (int16_t (*)[3]) &__vtmem[8024];
#define mpu_acq_test_mpu_acq_acc (*mpu_acq_test_mpu_acq_acc_p)
int16_t (*mpu_acq_test_mpu_acq_gyr_p)[3]= (int16_t (*)[3]) &__vtmem[8024];
#define mpu_acq_test_mpu_acq_gyr (*mpu_acq_test_mpu_acq_gyr_p)
float (*normalize_inp_test_normalize_normAcc_p)[3]= (float (*)[3]) &__vtmem[8030];
#define normalize_inp_test_normalize_normAcc (*normalize_inp_test_normalize_normAcc_p)
float (*normalize_inp_test_normalize_normGyr_p)[3]= (float (*)[3]) &__vtmem[8036];
#define normalize_inp_test_normalize_normGyr (*normalize_inp_test_normalize_normGyr_p)
/*End of managed memory variables*/
/*Module vars for mpu_acq_test*/
const int mpu_acq_test_x=0, mpu_acq_test_y=1, mpu_acq_test_z=2;
MPU6050 mpu_acq_test_mpu1;
uint16_t mpu_acq_test_fifoPacketSize;
uint16_t mpu_acq_test_currBucketBufferSize=0;
uint16_t mpu_acq_test_numNewReadings=0;
uint32_t mpu_acq_test_lastSent=0;
uint32_t mpu_acq_test_samplesAfterReset=0;
/*End of module vars for mpu_acq_test*/
/*Module vars for arduino*/
/*End of module vars for arduino*/
/*Module vars for normalize_inp_test*/
int normalize_inp_test___pos_normAX = 0;
int normalize_inp_test___pos_normAY = 0;
int normalize_inp_test___pos_normAZ = 0;
int normalize_inp_test___pos_normGX = 0;
int normalize_inp_test___pos_normGY = 0;
int normalize_inp_test___pos_normGZ = 0;
const int normalize_inp_test_x=0, normalize_inp_test_y=1, normalize_inp_test_z=2;
/*End of module vars for normalize_inp_test*/
int16_t (*normalize_inp_test_normalize_acc_p)[3];
#define normalize_inp_test_normalize_acc (*normalize_inp_test_normalize_acc_p)
int16_t (*normalize_inp_test_normalize_gyr_p)[3];
#define normalize_inp_test_normalize_gyr (*normalize_inp_test_normalize_gyr_p)
int16_t (*normalize_inp_test_normalize_numNewReadings_p);
#define normalize_inp_test_normalize_numNewReadings (*normalize_inp_test_normalize_numNewReadings_p)
int32_t (*normalize_inp_test_normalize_samplesAfterReset_p);
#define normalize_inp_test_normalize_samplesAfterReset (*normalize_inp_test_normalize_samplesAfterReset_p)
typedef enum { __mpu_acq_test_mpu_acq, __normalize_inp_test_normalize}  __icane_test;
 __icane_test __state = __mpu_acq_test_mpu_acq;
void _mpu_acq_test_init()
{
    uint8_t mpu_acq_test_init_devStatus;
    {
        Wire.begin();
        Wire.setClock(400000);
        mpu_acq_test_mpu1.initialize();
        mpu_acq_test_init_devStatus=mpu_acq_test_mpu1.dmpInitialize();
        if((mpu_acq_test_init_devStatus==0))
        {
            mpu_acq_test_mpu1.setDMPEnabled(true);
            }
        else
        {
            }
        mpu_acq_test_fifoPacketSize=mpu_acq_test_mpu1.dmpGetFIFOPacketSize();
        }
    }
void _mpu_acq_test_mpu_acq()
{
    uint16_t mpu_acq_test_mpu_acq_fifoCount=mpu_acq_test_mpu1.getFIFOCount();
    uint8_t mpu_acq_test_mpu_acq_mpuIntStatus=mpu_acq_test_mpu1.getIntStatus();
    VectorInt16 mpu_acq_test_mpu_acq_acc__, mpu_acq_test_mpu_acq_gyr__;
    {
        if(((mpu_acq_test_mpu_acq_mpuIntStatus&16)||(mpu_acq_test_mpu_acq_fifoCount==1024)))
        {
            mpu_acq_test_mpu1.resetFIFO();
            mpu_acq_test_samplesAfterReset=0;
            mpu_acq_test_numNewReadings=0;
            }
        else
        if((mpu_acq_test_mpu_acq_mpuIntStatus&2))
        {
            if((mpu_acq_test_mpu_acq_fifoCount>=mpu_acq_test_fifoPacketSize))
            {
                mpu_acq_test_mpu1.getFIFOBytes(mpu_acq_test_fifoBuffer, mpu_acq_test_fifoPacketSize);
                mpu_acq_test_mpu1.dmpGetAccel(&(mpu_acq_test_mpu_acq_acc__), mpu_acq_test_fifoBuffer);
                mpu_acq_test_mpu1.dmpGetGyro(&(mpu_acq_test_mpu_acq_gyr__), mpu_acq_test_fifoBuffer);
                mpu_acq_test_mpu_acq_acc[mpu_acq_test_x]=mpu_acq_test_mpu_acq_acc__.x;
                mpu_acq_test_mpu_acq_acc[mpu_acq_test_y]=mpu_acq_test_mpu_acq_acc__.y;
                mpu_acq_test_mpu_acq_acc[mpu_acq_test_z]=mpu_acq_test_mpu_acq_acc__.z;
                mpu_acq_test_mpu_acq_gyr[mpu_acq_test_x]=mpu_acq_test_mpu_acq_gyr__.x;
                mpu_acq_test_mpu_acq_gyr[mpu_acq_test_y]=mpu_acq_test_mpu_acq_gyr__.y;
                mpu_acq_test_mpu_acq_gyr[mpu_acq_test_z]=mpu_acq_test_mpu_acq_gyr__.z;
                normalize_inp_test_normalize_acc_p = &(mpu_acq_test_mpu_acq_acc); normalize_inp_test_normalize_gyr_p = &(mpu_acq_test_mpu_acq_gyr); normalize_inp_test_normalize_numNewReadings = mpu_acq_test_numNewReadings; normalize_inp_test_normalize_samplesAfterReset = mpu_acq_test_samplesAfterReset; __state = __normalize_inp_test_normalize;
                }
            }
        }
    }
void _normalize_inp_test_init()
{
    {
        normalize_inp_test_minAcc[normalize_inp_test_x]=(-(16384));
        normalize_inp_test_minAcc[normalize_inp_test_y]=(-(16384));
        normalize_inp_test_minAcc[normalize_inp_test_z]=(-(16384));
        normalize_inp_test_maxAcc[normalize_inp_test_x]=16384;
        normalize_inp_test_maxAcc[normalize_inp_test_y]=16384;
        normalize_inp_test_maxAcc[normalize_inp_test_z]=16384;
        normalize_inp_test_minGyr[normalize_inp_test_x]=(-(512));
        normalize_inp_test_minGyr[normalize_inp_test_y]=(-(2048));
        normalize_inp_test_minGyr[normalize_inp_test_z]=(-(512));
        normalize_inp_test_maxGyr[normalize_inp_test_x]=512;
        normalize_inp_test_maxGyr[normalize_inp_test_y]=2048;
        normalize_inp_test_maxGyr[normalize_inp_test_z]=512;
        }
    }
void _normalize_inp_test_minMaxNormalize(int16_t normalize_inp_test_minMaxNormalize_v[3], int16_t normalize_inp_test_minMaxNormalize_vmin[3], int16_t normalize_inp_test_minMaxNormalize_vmax[3], float normalize_inp_test_minMaxNormalize_dst[3])
{
    {
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_x]=((float(normalize_inp_test_minMaxNormalize_v[normalize_inp_test_x]))-(float(normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_x])));
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_x]=(normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_x]/((float(normalize_inp_test_minMaxNormalize_vmax[normalize_inp_test_x]))-(float(normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_x]))));
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_y]=((float(normalize_inp_test_minMaxNormalize_v[normalize_inp_test_y]))-(float(normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_y])));
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_y]=(normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_y]/((float(normalize_inp_test_minMaxNormalize_vmax[normalize_inp_test_y]))-(float(normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_y]))));
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_z]=((float(normalize_inp_test_minMaxNormalize_v[normalize_inp_test_z]))-(float(normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_z])));
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_z]=(normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_z]/((float(normalize_inp_test_minMaxNormalize_vmax[normalize_inp_test_z]))-(float(normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_z]))));
        }
    }
void _normalize_inp_test_normalize()
{
    {
        _normalize_inp_test_minMaxNormalize(normalize_inp_test_normalize_acc, normalize_inp_test_minAcc, normalize_inp_test_maxAcc, normalize_inp_test_normalize_normAcc);
        _normalize_inp_test_minMaxNormalize(normalize_inp_test_normalize_gyr, normalize_inp_test_minGyr, normalize_inp_test_maxGyr, normalize_inp_test_normalize_normGyr);
        (normalize_inp_test_normAX[normalize_inp_test___pos_normAX = (normalize_inp_test___pos_normAX + 1 == 400 ? 0: normalize_inp_test___pos_normAX + 1)] = normalize_inp_test_normalize_normAcc[normalize_inp_test_x]);
        (normalize_inp_test_normAY[normalize_inp_test___pos_normAY = (normalize_inp_test___pos_normAY + 1 == 400 ? 0: normalize_inp_test___pos_normAY + 1)] = normalize_inp_test_normalize_normAcc[normalize_inp_test_y]);
        (normalize_inp_test_normAZ[normalize_inp_test___pos_normAZ = (normalize_inp_test___pos_normAZ + 1 == 400 ? 0: normalize_inp_test___pos_normAZ + 1)] = normalize_inp_test_normalize_normAcc[normalize_inp_test_z]);
        (normalize_inp_test_normGX[normalize_inp_test___pos_normGX = (normalize_inp_test___pos_normGX + 1 == 400 ? 0: normalize_inp_test___pos_normGX + 1)] = normalize_inp_test_normalize_normGyr[normalize_inp_test_x]);
        (normalize_inp_test_normGX[normalize_inp_test___pos_normGX = (normalize_inp_test___pos_normGX + 1 == 400 ? 0: normalize_inp_test___pos_normGX + 1)] = normalize_inp_test_normalize_normGyr[normalize_inp_test_y]);
        (normalize_inp_test_normGZ[normalize_inp_test___pos_normGZ = (normalize_inp_test___pos_normGZ + 1 == 400 ? 0: normalize_inp_test___pos_normGZ + 1)] = normalize_inp_test_normalize_normGyr[normalize_inp_test_z]);
        normalize_inp_test_normalize_numNewReadings=(normalize_inp_test_normalize_numNewReadings+1);
        normalize_inp_test_normalize_samplesAfterReset=(normalize_inp_test_normalize_samplesAfterReset+1);
        if((normalize_inp_test_normalize_samplesAfterReset<250))
        {
            if((normalize_inp_test_normalize_numNewReadings==STRIDE))
            {
                normalize_inp_test_normalize_numNewReadings=0;
                }
            }
        else
        if((normalize_inp_test_normalize_numNewReadings==STRIDE))
        {
            normalize_inp_test_normalize_samplesAfterReset=401;
            }
        }
    }
void loop()
{
    switch(__state)
    {
        case __mpu_acq_test_mpu_acq:
        __state = __mpu_acq_test_mpu_acq;
        _mpu_acq_test_mpu_acq();
        break;
        case __normalize_inp_test_normalize:
        __state = __mpu_acq_test_mpu_acq;
        _normalize_inp_test_normalize();
        break;
        default :
        __state = __mpu_acq_test_mpu_acq;
        }
    }
void setup()
{
    _mpu_acq_test_init();
    _normalize_inp_test_init();
    }