module tlcfeaturizer_test;

include config;

int bucketIndex;

default flow featurizer(float ring[400] normAX,float ring[400] normAY,float ring[400] normAZ, float ring[400] normGX, float ring[400] normGY, float ring[400] GZ){
	int[FEATURE_LENGTH] featureVector;
	float[FEATURE_LENGTH] featureVectorF;
	int result;
	featureVector=0; featureVectorF=0;
	featureVector[0]=-1;
	featureVector[3]=-1;
	bucketIndex=4;
	getBucket(normAX,featureVector);
	getBucket(normAY,featureVector);
	getBucket(normAZ,featureVector);
	getBucket(normGX,featureVector);
	getBucket(normGY,featureVector);
	getBucket(normGZ,featureVector);
	featureVectorF = featureVector;
	// next(featureVectorF);
}

void getBucket(float ring[400] sensorValue1D, int[FEATURE_LENGTH] bucketDistribution){
	int imax=0,imin=0,maxval=0,minval=0,maxcount=0,mincount=0,postemp=0,negtemp=0,bucketCount,val,index;

	boolean flagPos=false, flagNeg=false;
	float j,k;
	for i in [0,400]{
		val=int(100)*sensorValue1D[i];
		if(val<0){
			bucketDistribution[bucketIndex]=bucketDistribution[bucketIndex]+1;
		}
		else if(val>100){
			bucketDistribution[bucketIndex+19]=bucketDistribution[bucketIndex+19]+1;
		}
		else{
			index=val/5;
			bucketDistribution[bucketIndex+index]=bucketDistribution[bucketIndex+index]+1;
		}
		
	}
}