/********************************************************************************
This code is automatically generated by the VerticalThings compiler. DO NOT EDIT!
********************************************************************************/
#include <Arduino.h>
#include <Wire.h>
/*Managed memory variables*/
uint32_t __vtmem[2415];
int16_t (*normalize_inp_test_minAcc_p)[3]= (int16_t (*)[3]) &__vtmem[0];
#define normalize_inp_test_minAcc (*normalize_inp_test_minAcc_p)
int16_t (*normalize_inp_test_maxAcc_p)[3]= (int16_t (*)[3]) &__vtmem[2];
#define normalize_inp_test_maxAcc (*normalize_inp_test_maxAcc_p)
int16_t (*normalize_inp_test_minGyr_p)[3]= (int16_t (*)[3]) &__vtmem[4];
#define normalize_inp_test_minGyr (*normalize_inp_test_minGyr_p)
int16_t (*normalize_inp_test_maxGyr_p)[3]= (int16_t (*)[3]) &__vtmem[6];
#define normalize_inp_test_maxGyr (*normalize_inp_test_maxGyr_p)
float (*normalize_inp_test_normAX_p)[400]= (float (*)[400]) &__vtmem[8];
#define normalize_inp_test_normAX (*normalize_inp_test_normAX_p)
float (*normalize_inp_test_normAY_p)[400]= (float (*)[400]) &__vtmem[408];
#define normalize_inp_test_normAY (*normalize_inp_test_normAY_p)
float (*normalize_inp_test_normAZ_p)[400]= (float (*)[400]) &__vtmem[808];
#define normalize_inp_test_normAZ (*normalize_inp_test_normAZ_p)
float (*normalize_inp_test_normGX_p)[400]= (float (*)[400]) &__vtmem[1208];
#define normalize_inp_test_normGX (*normalize_inp_test_normGX_p)
float (*normalize_inp_test_normGZ_p)[400]= (float (*)[400]) &__vtmem[1608];
#define normalize_inp_test_normGZ (*normalize_inp_test_normGZ_p)
float (*normalize_inp_test_normGY_p)[400]= (float (*)[400]) &__vtmem[2008];
#define normalize_inp_test_normGY (*normalize_inp_test_normGY_p)
int16_t (*mpu_acq_test_mpu_acq_acc_p)[3]= (int16_t (*)[3]) &__vtmem[2408];
#define mpu_acq_test_mpu_acq_acc (*mpu_acq_test_mpu_acq_acc_p)
int16_t (*mpu_acq_test_mpu_acq_gyr_p)[3]= (int16_t (*)[3]) &__vtmem[2410];
#define mpu_acq_test_mpu_acq_gyr (*mpu_acq_test_mpu_acq_gyr_p)
float (*normalize_inp_test_normalize_normAcc_p)[3]= (float (*)[3]) &__vtmem[2412];
#define normalize_inp_test_normalize_normAcc (*normalize_inp_test_normalize_normAcc_p)
float (*normalize_inp_test_normalize_normGyr_p)[3]= (float (*)[3]) &__vtmem[2412];
#define normalize_inp_test_normalize_normGyr (*normalize_inp_test_normalize_normGyr_p)
/*End of managed memory variables*/
/*Module vars for mpu_acq_test*/
const int mpu_acq_test_x=0, mpu_acq_test_y=1, mpu_acq_test_z=2, mpu_acq_test_MPU_addr=104;
uint16_t mpu_acq_test_fifoPacketSize;
uint16_t mpu_acq_test_currBucketBufferSize=0;
uint16_t mpu_acq_test_numNewReadings=0;
uint32_t mpu_acq_test_lastSent=0;
uint32_t mpu_acq_test_samplesAfterReset=0;
/*End of module vars for mpu_acq_test*/
/*Module vars for arduino*/
/*End of module vars for arduino*/
/*Module vars for normalize_inp_test*/
const int16_t normalize_inp_test_BAUD_RATE=115200;
const int16_t normalize_inp_test_NUM_BUCKETS=20;
const int16_t normalize_inp_test_STRIDE=20;
const int16_t normalize_inp_test_BUCKET_WIDTH=20;
const int16_t normalize_inp_test_BUCKET_BUFF_WIDTH=(2*normalize_inp_test_BUCKET_WIDTH);
const int16_t normalize_inp_test_FEATURE_LENGTH=((6*normalize_inp_test_BUCKET_WIDTH)+4);
const int16_t normalize_inp_test_FEAT_VEC_DIM=((6*normalize_inp_test_NUM_BUCKETS)+4);
const int16_t normalize_inp_test_GEST_NOTA=0;
const int16_t normalize_inp_test_GEST_SILENCE=1;
const int16_t normalize_inp_test_GEST_TAP=2;
const int16_t normalize_inp_test_GEST_DTAP=3;
const int16_t normalize_inp_test_GEST_LTWIST=4;
const int16_t normalize_inp_test_GEST_RTWIST=5;
const int16_t normalize_inp_test_GEST_Slow_LTWIST=7;
const int16_t normalize_inp_test_GEST_Slow_RTWIST=8;
int normalize_inp_test___pos_normAX = 0;
int normalize_inp_test___pos_normAY = 0;
int normalize_inp_test___pos_normAZ = 0;
int normalize_inp_test___pos_normGX = 0;
int normalize_inp_test___pos_normGY = 0;
int normalize_inp_test___pos_normGZ = 0;
const int normalize_inp_test_x=0, normalize_inp_test_y=1, normalize_inp_test_z=2;
/*End of module vars for normalize_inp_test*/
int16_t (*normalize_inp_test_normalize_acc_p)[3];
#define normalize_inp_test_normalize_acc (*normalize_inp_test_normalize_acc_p)
int16_t (*normalize_inp_test_normalize_gyr_p)[3];
#define normalize_inp_test_normalize_gyr (*normalize_inp_test_normalize_gyr_p)
int16_t (*normalize_inp_test_normalize_numNewReadings_p);
#define normalize_inp_test_normalize_numNewReadings (*normalize_inp_test_normalize_numNewReadings_p)
int32_t (*normalize_inp_test_normalize_samplesAfterReset_p);
#define normalize_inp_test_normalize_samplesAfterReset (*normalize_inp_test_normalize_samplesAfterReset_p)
typedef enum { __mpu_acq_test_mpu_acq, __normalize_inp_test_normalize}  __pipe;
 __pipe __state = __mpu_acq_test_mpu_acq;
void _mpu_acq_test_init()
{
    uint8_t mpu_acq_test_init_devStatus;
    {
        Wire.begin();
        Wire.beginTransmission(mpu_acq_test_MPU_addr);
        Wire.write(107);
        Wire.write(0);
        Wire.endTransmission(true);
    }
}
void _mpu_acq_test_mpu_acq()
{
    {
        Wire.beginTransmission(mpu_acq_test_MPU_addr);
        Wire.write(59);
        Wire.endTransmission(false);
        Wire.requestFrom(mpu_acq_test_MPU_addr, 14, true);
        mpu_acq_test_mpu_acq_acc[mpu_acq_test_x]=((Wire.read()<<8)|Wire.read());
        mpu_acq_test_mpu_acq_acc[mpu_acq_test_y]=((Wire.read()<<8)|Wire.read());
        mpu_acq_test_mpu_acq_acc[mpu_acq_test_z]=((Wire.read()<<8)|Wire.read());
        mpu_acq_test_mpu_acq_gyr[mpu_acq_test_x]=((Wire.read()<<8)|Wire.read());
        mpu_acq_test_mpu_acq_gyr[mpu_acq_test_y]=((Wire.read()<<8)|Wire.read());
        mpu_acq_test_mpu_acq_gyr[mpu_acq_test_z]=((Wire.read()<<8)|Wire.read());
        Serial.println(mpu_acq_test_mpu_acq_acc[mpu_acq_test_x]);
        Serial.println(mpu_acq_test_mpu_acq_acc[mpu_acq_test_y]);
        Serial.println(mpu_acq_test_mpu_acq_acc[mpu_acq_test_z]);
        Serial.println(mpu_acq_test_mpu_acq_gyr[mpu_acq_test_x]);
        Serial.println(mpu_acq_test_mpu_acq_gyr[mpu_acq_test_y]);
        Serial.println(mpu_acq_test_mpu_acq_gyr[mpu_acq_test_z]);
        Serial.println("going to norm");
        normalize_inp_test_normalize_acc_p = &(mpu_acq_test_mpu_acq_acc); normalize_inp_test_normalize_gyr_p = &(mpu_acq_test_mpu_acq_gyr); normalize_inp_test_normalize_numNewReadings = mpu_acq_test_numNewReadings; normalize_inp_test_normalize_samplesAfterReset = mpu_acq_test_samplesAfterReset; __state = __normalize_inp_test_normalize;
    }
}
void _normalize_inp_test_init()
{
    {
        normalize_inp_test_minAcc[normalize_inp_test_x]=(-16384);
        normalize_inp_test_minAcc[normalize_inp_test_y]=(-16384);
        normalize_inp_test_minAcc[normalize_inp_test_z]=(-16384);
        normalize_inp_test_maxAcc[normalize_inp_test_x]=16384;
        normalize_inp_test_maxAcc[normalize_inp_test_y]=16384;
        normalize_inp_test_maxAcc[normalize_inp_test_z]=16384;
        normalize_inp_test_minGyr[normalize_inp_test_x]=(-512);
        normalize_inp_test_minGyr[normalize_inp_test_y]=(-2048);
        normalize_inp_test_minGyr[normalize_inp_test_z]=(-512);
        normalize_inp_test_maxGyr[normalize_inp_test_x]=512;
        normalize_inp_test_maxGyr[normalize_inp_test_y]=2048;
        normalize_inp_test_maxGyr[normalize_inp_test_z]=512;
    }
}
void _normalize_inp_test_minMaxNormalize(int16_t normalize_inp_test_minMaxNormalize_v[3], int16_t normalize_inp_test_minMaxNormalize_vmin[3], int16_t normalize_inp_test_minMaxNormalize_vmax[3], float normalize_inp_test_minMaxNormalize_dst[3])
{
    {
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_x]=(( (float) (normalize_inp_test_minMaxNormalize_v[normalize_inp_test_x]))-( (float) (normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_x])));
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_x]=(normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_x]/(( (float) (normalize_inp_test_minMaxNormalize_vmax[normalize_inp_test_x]))-( (float) (normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_x]))));
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_y]=(( (float) (normalize_inp_test_minMaxNormalize_v[normalize_inp_test_y]))-( (float) (normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_y])));
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_y]=(normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_y]/(( (float) (normalize_inp_test_minMaxNormalize_vmax[normalize_inp_test_y]))-( (float) (normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_y]))));
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_z]=(( (float) (normalize_inp_test_minMaxNormalize_v[normalize_inp_test_z]))-( (float) (normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_z])));
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_z]=(normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_z]/(( (float) (normalize_inp_test_minMaxNormalize_vmax[normalize_inp_test_z]))-( (float) (normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_z]))));
    }
}
void _normalize_inp_test_normalize()
{
    {
        _normalize_inp_test_minMaxNormalize(normalize_inp_test_normalize_acc, normalize_inp_test_minAcc, normalize_inp_test_maxAcc, normalize_inp_test_normalize_normAcc);
        _normalize_inp_test_minMaxNormalize(normalize_inp_test_normalize_gyr, normalize_inp_test_minGyr, normalize_inp_test_maxGyr, normalize_inp_test_normalize_normGyr);
        (normalize_inp_test_normAX[normalize_inp_test___pos_normAX = (normalize_inp_test___pos_normAX + 1 == 400 ? 0: normalize_inp_test___pos_normAX + 1)] = normalize_inp_test_normalize_normAcc[normalize_inp_test_x]);
        (normalize_inp_test_normAY[normalize_inp_test___pos_normAY = (normalize_inp_test___pos_normAY + 1 == 400 ? 0: normalize_inp_test___pos_normAY + 1)] = normalize_inp_test_normalize_normAcc[normalize_inp_test_y]);
        (normalize_inp_test_normAZ[normalize_inp_test___pos_normAZ = (normalize_inp_test___pos_normAZ + 1 == 400 ? 0: normalize_inp_test___pos_normAZ + 1)] = normalize_inp_test_normalize_normAcc[normalize_inp_test_z]);
        (normalize_inp_test_normGX[normalize_inp_test___pos_normGX = (normalize_inp_test___pos_normGX + 1 == 400 ? 0: normalize_inp_test___pos_normGX + 1)] = normalize_inp_test_normalize_normGyr[normalize_inp_test_x]);
        (normalize_inp_test_normGX[normalize_inp_test___pos_normGX = (normalize_inp_test___pos_normGX + 1 == 400 ? 0: normalize_inp_test___pos_normGX + 1)] = normalize_inp_test_normalize_normGyr[normalize_inp_test_y]);
        (normalize_inp_test_normGZ[normalize_inp_test___pos_normGZ = (normalize_inp_test___pos_normGZ + 1 == 400 ? 0: normalize_inp_test___pos_normGZ + 1)] = normalize_inp_test_normalize_normGyr[normalize_inp_test_z]);
        normalize_inp_test_normalize_numNewReadings=(normalize_inp_test_normalize_numNewReadings+1);
        normalize_inp_test_normalize_samplesAfterReset=(normalize_inp_test_normalize_samplesAfterReset+1);
        if((normalize_inp_test_normalize_samplesAfterReset<250))
        {
            if((normalize_inp_test_normalize_numNewReadings==normalize_inp_test_STRIDE))
            {
                normalize_inp_test_normalize_numNewReadings=0;
            }
        }
        else
        if((normalize_inp_test_normalize_numNewReadings==normalize_inp_test_STRIDE))
        {
            normalize_inp_test_normalize_samplesAfterReset=401;
            Serial.println("Inside norm");
            Serial.println(normalize_inp_test_normAX[ ( (2) + normalize_inp_test___pos_normAX) % 400]);
            Serial.println(normalize_inp_test_normAY[ ( (0) + normalize_inp_test___pos_normAY) % 400]);
            Serial.println(normalize_inp_test_normAZ[ ( (0) + normalize_inp_test___pos_normAZ) % 400]);
            Serial.println(normalize_inp_test_normGX[ ( (0) + normalize_inp_test___pos_normGX) % 400]);
            Serial.println(normalize_inp_test_normGY[ ( (0) + normalize_inp_test___pos_normGY) % 400]);
            Serial.println(normalize_inp_test_normGZ[ ( (0) + normalize_inp_test___pos_normGZ) % 400]);
        }
    }
}
void loop()
{
    switch(__state)
    {
        case __mpu_acq_test_mpu_acq:
        __state = __mpu_acq_test_mpu_acq;
        _mpu_acq_test_mpu_acq();
        break;
        case __normalize_inp_test_normalize:
        __state = __mpu_acq_test_mpu_acq;
        _normalize_inp_test_normalize();
        break;
        default :
        __state = __mpu_acq_test_mpu_acq;
    }
}
void setup()
{
    _mpu_acq_test_init();
    _normalize_inp_test_init();
}
