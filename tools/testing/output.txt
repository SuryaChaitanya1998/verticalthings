Parsing test_pipe.vt
Parsing ./test_mod.vt
Parsing ./arduino.vt
{ symtbl: 
   SymbolTable {
     name: 'test_pipe',
     parent: undefined,
     symbols: {},
     scopes: { test_mod: [Object], arduino: [Object] },
     current_scope: [Circular],
     src: { start: [Object], end: [Object] },
     uses: [],
     vars: [],
     pipeline: 
      { src: [Object],
        name: 'test_pipe',
        block: [Object],
        srcpath: 'test_pipe.vt' },
     fdefs: [],
     modules: { test_mod: [Object], arduino: [Object] } },
  params: {},
  resources: {},
  config: 
   { build: 
      { arduino: '/home/arduino/.arduino15',
        objdump: 'arm-linux-gnueabi-objdump' } },
  duseq: 
   [ { mem: [Object] },
     { use: [], def: [] },
     { use: [], def: [Object] },
     { use: [], def: [] },
     { undef: [Object] },
     { use: [], def: [Object] },
     { use: [], def: [Object] },
     { use: [], def: [Object] },
     { use: [Object], def: [Object] } ],
  mem: 
   { alloc: [ [Object], [Object], [Object], [Object] ],
     total_alloc_size: 3320,
     total_obj_size: 4920 },
  code: 
   [ '/********************************************************************************',
     'This code is automatically generated by the VerticalThings compiler. DO NOT EDIT!',
     '********************************************************************************/',
     '/*Managed memory variables*/',
     'unsigned char __vtmem[3320];',
     'int (*test_mod_anothertemp_A_p)[20][20]= (int (*)[20][20]) &__vtmem[0];',
     '#define test_mod_anothertemp_A (*test_mod_anothertemp_A_p)',
     'float (*test_mod_buf_p)[30]= (float (*)[30]) &__vtmem[0];',
     '#define test_mod_buf (*test_mod_buf_p)',
     'int (*test_mod_anothertemp_B_p)[20][20]= (int (*)[20][20]) &__vtmem[120];',
     '#define test_mod_anothertemp_B (*test_mod_anothertemp_B_p)',
     'int (*test_mod_anothertemp_C_p)[20][20]= (int (*)[20][20]) &__vtmem[1720];',
     '#define test_mod_anothertemp_C (*test_mod_anothertemp_C_p)',
     '/*End of managed memory variables*/',
     '/*Module vars for test_mod*/',
     '/*End of module vars for test_mod*/',
     '/*Module vars for arduino*/',
     '/*End of module vars for arduino*/',
     'typedef enum { __test_mod_test_func}  __test_pipe;',
     ' __test_pipe __state = __test_mod_test_func;',
     'void _test_mod_test_func()',
     '{',
     '    int test_mod_test_func_sum;',
     '    {',
     '        pinPeripheral(3, 4);',
     '        mpu.getFIFOBytes(test_mod_buf, size);',
     '        _test_mod_anothertemp();',
     '    }',
     '}',
     'void _test_mod_just_a_function()',
     '{',
     '    int __t0;',
     '    {',
     '        for(int __i=0; __i<20; __i++)',
     '        {',
     '            for(int __j=0; __j<20; __j++)',
     '            {',
     '                test_mod_just_a_function_A[__i][__j]=0;',
     '                test_mod_just_a_function_B[__i][__j]=0;',
     '                test_mod_just_a_function_C[__i][__j]=0;',
     '            }',
     '        }',
     '        for(int i=0; i<10; i++)',
     '        {',
     '            for(int __i=0; __i<20; __i++)',
     '            {',
     '                for(int __j=0; __j<20; __j++)',
     '                {',
     '                    __t0=0;',
     '                    for(int __k=0; __k<20; __k++)',
     '                    {',
     '                        __t0=((test_mod_just_a_function_A[__i][__k]*test_mod_just_a_function_B[__k][__j])+__t0);',
     '                    }',
     '                    test_mod_just_a_function_C[__i][__j]=__t0;',
     '                }',
     '            }',
     '        }',
     '    }',
     '}',
     'void _test_mod_anothertemp()',
     '{',
     '    int test_mod_anothertemp_sum=0;',
     '    int __t0;',
     '    {',
     '        for(int __i=0; __i<20; __i++)',
     '        {',
     '            for(int __j=0; __j<20; __j++)',
     '            {',
     '                test_mod_anothertemp_A[__i][__j]=0;',
     '                test_mod_anothertemp_B[__i][__j]=0;',
     '                test_mod_anothertemp_C[__i][__j]=0;',
     '            }',
     '        }',
     '        for(int i=0; i<10; i++)',
     '        {',
     '            if((i>5))',
     '            {',
     '                for(int __i=0; __i<20; __i++)',
     '                {',
     '                    for(int __j=0; __j<20; __j++)',
     '                    {',
     '                        __t0=0;',
     '                        for(int __k=0; __k<20; __k++)',
     '                        {',
     '                            __t0=((test_mod_anothertemp_A[__i][__k]*test_mod_anothertemp_B[__k][__j])+__t0);',
     '                        }',
     '                        test_mod_anothertemp_C[__i][__j]=__t0;',
     '                    }',
     '                }',
     '            }',
     '            else',
     '            {',
     '                _test_mod_just_a_function();',
     '            }',
     '        }',
     '    }',
     '}',
     'void _test_mod_temp()',
     '{',
     '    {',
     '        for(int i=0; i<10; i++)',
     '        {',
     '            _test_mod_anothertemp();',
     '        }',
     '    }',
     '}',
     'void loop()',
     '{',
     '    switch(__state)',
     '    {',
     '        case __test_mod_test_func:',
     '        __state = __test_mod_test_func;',
     '        _test_mod_test_func();',
     '        break;',
     '        default :',
     '        __state = __test_mod_test_func;',
     '    }',
     '}',
     'void setup()',
     '{',
     '}' ],
  WCET: [ { name: [Object], time: 19098715 } ] }
Warnings: 
[ { text: 'Symbol  size  not found' },
  { text: 'Symbol  __i  not found' },
  { text: 'Symbol  __j  not found' },
  { text: 'Symbol  __i  not found' },
  { text: 'Symbol  __j  not found' },
  { text: 'Symbol  __i  not found' },
  { text: 'Symbol  __j  not found' },
  { text: 'Symbol  __i  not found' },
  { text: 'Symbol  __k  not found' },
  { text: 'Symbol  __k  not found' },
  { text: 'Symbol  __j  not found' },
  { text: 'Symbol  __i  not found' },
  { text: 'Symbol  __j  not found' },
  { text: 'Symbol  __i  not found' },
  { text: 'Symbol  __j  not found' },
  { text: 'Symbol  __i  not found' },
  { text: 'Symbol  __j  not found' },
  { text: 'Symbol  __i  not found' },
  { text: 'Symbol  __j  not found' },
  { text: 'Symbol  i  not found' },
  { text: 'Symbol  __i  not found' },
  { text: 'Symbol  __k  not found' },
  { text: 'Symbol  __k  not found' },
  { text: 'Symbol  __j  not found' },
  { text: 'Symbol  __i  not found' },
  { text: 'Symbol  __j  not found' } ]
